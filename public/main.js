/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("const HEIGHT = 480;\r\nconst WIDTH = 800;\r\nconst marioHEIGHT = 32;\r\nconst marioWIDTH = 32;\r\nconst TUNNEL_WIDTH = 100;\r\nconst TUNNEL_HEIGHT = 50;\r\nconst RIGHT_CENTER = (WIDTH / 4) - (TUNNEL_WIDTH / 2);\r\nconst LEFT_CENTER = (WIDTH / 4) * 3 - (TUNNEL_WIDTH / 2) + 50;\r\nvar killed = false;\r\nconst canvas = document.createElement('canvas');\r\nconst ctx = canvas.getContext('2d');\r\ncanvas.width = WIDTH;\r\ncanvas.style.background = 'black';\r\ncanvas.height = HEIGHT;\r\ndocument.body.appendChild(canvas);\r\n\r\nclass GameRecord {\r\n    constructor(\r\n        timestamp, times\r\n    ) {\r\n        this.timestamp = 0;\r\n        this.times = 0;\r\n    }\r\n}\r\nclass Game {\r\n    constructor() {\r\n        this.tunnel = new Tunnel();\r\n        this.mario = new Mario();\r\n        this.stopwatch = new Stopwatch();\r\n        this.scores = {\r\n            'singleTunnel': {\r\n                'trial': [],\r\n                'performance': []\r\n            },\r\n            'doubleTunnel': {\r\n                'trial': [],\r\n                'performance': []\r\n            }\r\n        };\r\n        this.gameMode = 'singleTunnel';\r\n        this.times = 0;\r\n    }\r\n    changeGameMode() {\r\n        if (this.gameMode === 'singleTunnel') {\r\n            this.gameMode = 'doubleTunnel';\r\n        } else {\r\n            this.gameMode = 'singleTunnel';\r\n        }\r\n    }\r\n}\r\n\r\nclass Mario {\r\n    constructor() {\r\n        this.x = (WIDTH / 2) - (marioWIDTH / 2);\r\n        this.y = 0;\r\n        this.width = marioWIDTH;\r\n        this.height = marioHEIGHT;\r\n        this.image = new Image();\r\n        this.image.src = 'images/mario.png';\r\n        this.speed = 5;\r\n        this.times = 1;\r\n    }\r\n    draw() {\r\n        ctx.drawImage(this.image, this.x, this.y, this.width, this.height);\r\n    }\r\n    move() {\r\n        this.y += this.speed;\r\n    }\r\n    checkCollision() {\r\n        if (game.gameMode === 'singleTunnel') {\r\n            if (tunnel.checkCollision(this)) {\r\n                // Mario hit the tunnel\r\n                this.speed = 0;\r\n                stopwatch.stop();\r\n                this.onKill();\r\n            }\r\n            if (this.y + this.height > HEIGHT) {\r\n                this.y = HEIGHT - this.height;\r\n                this.speed = 0;\r\n                stopwatch.stop();\r\n                this.onKill();\r\n            }\r\n        }\r\n        if (game.gameMode === 'doubleTunnel') {\r\n            if (doubleTunnel.checkCollision(this)) {\r\n                // Mario hit the tunnel\r\n                this.speed = 0;\r\n                stopwatch.stop();\r\n                this.onKill();\r\n            }\r\n            if (this.y + this.height > HEIGHT) {\r\n                this.y = HEIGHT - this.height;\r\n                this.speed = 0;\r\n                stopwatch.stop();\r\n                this.onKill();\r\n            }\r\n        }\r\n    }\r\n    startOver() {\r\n        if (game.gameMode === 'singleTunnel') {\r\n            this.x = (WIDTH / 2) - (marioWIDTH / 2);\r\n        } else {\r\n            // random left right \r\n            const random = Math.floor(Math.random() * 2);\r\n            if (random === 0) {\r\n                this.x = RIGHT_CENTER;\r\n            } else {\r\n                this.x = LEFT_CENTER;\r\n            }\r\n        }\r\n        this.y = 0;\r\n        this.width = marioWIDTH;\r\n        this.height = marioHEIGHT;\r\n        this.image = new Image();\r\n        this.image.src = 'images/mario.png';\r\n        this.speed = 5;\r\n        stopwatch.stop();\r\n        stopwatch.start();\r\n    }\r\n    onKill() {\r\n        const elapsedTime = stopwatch.getElapsedTime();\r\n        const record = new GameRecord(elapsedTime, this.times);\r\n        game.scores[game.gameMode].trial.push(record);\r\n        this.times++;\r\n        this.startOver();\r\n\r\n    }\r\n    position(x) {\r\n        this.x = x;\r\n    }\r\n}\r\nclass Stopwatch {\r\n    constructor() {\r\n        this.startTime = null;\r\n        this.stopTime = null;\r\n        this.running = false;\r\n    }\r\n    start() {\r\n        if (this.running) {\r\n            return;\r\n        }\r\n        this.startTime = new Date().getTime();\r\n        this.running = true;\r\n    }\r\n    stop() {\r\n        if (!this.running) {\r\n            return;\r\n        }\r\n        this.stopTime = new Date().getTime();\r\n        this.running = false;\r\n    }\r\n    getElapsedTime() {\r\n        if (this.startTime == null) {\r\n            return 0;\r\n        }\r\n        if (this.running) {\r\n            return new Date().getTime() - this.startTime;\r\n        }\r\n        return this.stopTime - this.startTime;\r\n    }\r\n}\r\n\r\nconst stopwatch = new Stopwatch();\r\nclass Tunnel {\r\n    constructor(x) {\r\n        this.x = x;\r\n        this.y = (HEIGHT / 1.25);\r\n        this.width = TUNNEL_WIDTH;\r\n        this.height = TUNNEL_HEIGHT;\r\n    }\r\n    draw() {\r\n        ctx.fillStyle = \"green\";\r\n        ctx.fillRect(this.x, this.y, this.width, this.height);\r\n    }\r\n    checkCollision(obj) {\r\n        if (obj.x < this.x + this.width &&\r\n            obj.x + obj.width > this.x &&\r\n            obj.y + obj.height > this.y &&\r\n            obj.y + obj.height < this.y + this.height) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nconst tunnel = new Tunnel((WIDTH / 2) - 50);\r\nconst mario = new Mario();\r\n\r\ndocument.addEventListener('keydown', (event) => {\r\n    if (event.code === 'ArrowUp') {\r\n        mario.speed = -5;\r\n    }\r\n});\r\n\r\ndocument.addEventListener('keyup', (event) => {\r\n    if (event.code === 'ArrowUp') {\r\n        mario.speed = 5;\r\n    }\r\n});\r\n// right arrow key\r\ndocument.addEventListener('keydown', (event) => {\r\n    if (event.code === 'ArrowRight') {\r\n        mario.x += 5;\r\n    }\r\n});\r\n// left arrow key\r\ndocument.addEventListener('keydown', (event) => {\r\n    if (event.code === 'ArrowLeft') {\r\n        mario.x -= 5;\r\n    }\r\n});\r\n/* space speed 0 */\r\ndocument.addEventListener('keydown', (event) => {\r\n    if (event.code === 'Space') {\r\n        mario.speed = 0;\r\n        stopwatch.stop();\r\n    }\r\n});\r\n// start over click r\r\ndocument.addEventListener('keydown', (event) => {\r\n    if (event.code === 'KeyR') {\r\n        mario.startOver();\r\n    }\r\n});\r\n/* click m change game mode */\r\n\r\ndocument.addEventListener('keydown', (event) => {\r\n    if (event.code === 'KeyM') {\r\n        game.changeGameMode();\r\n        mario.startOver();\r\n    }\r\n});\r\nstopwatch.start();\r\nconst game = new Game();\r\nclass DoubleTunnel {\r\n    constructor() {\r\n        // left center tunnel\r\n        this.tunnel1 = new Tunnel((WIDTH / 4) - (TUNNEL_WIDTH / 2));\r\n        // right center tunnel\r\n        this.tunnel2 = new Tunnel((WIDTH / 4) * 3 - (TUNNEL_WIDTH / 2));\r\n    }\r\n    draw() {\r\n        this.tunnel1.draw();\r\n        this.tunnel2.draw();\r\n    }\r\n    checkCollision(obj) {\r\n        if (this.tunnel1.checkCollision(obj) || this.tunnel2.checkCollision(obj)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nconst doubleTunnel = new DoubleTunnel();\r\n\r\n\r\nfunction draw() {\r\n    ctx.clearRect(0, 0, WIDTH, HEIGHT);\r\n    mario.draw();\r\n    mario.move();\r\n    mario.checkCollision();\r\n    if (game.gameMode === 'singleTunnel') {\r\n        tunnel.draw();\r\n    } else {\r\n        doubleTunnel.draw();\r\n    }\r\n    // Display elapsed time\r\n    ctx.fillStyle = \"white\";\r\n    ctx.font = \"20px Arial\";\r\n    ctx.fillText(`Elapsed Time: ${stopwatch.getElapsedTime()}ms`, 20, 40);\r\n    // Display times\r\n    ctx.fillStyle = \"white\";\r\n    ctx.font = \"20px Arial\";\r\n    ctx.fillText(`Times: ${mario.times}`, 20, 80);\r\n    requestAnimationFrame(draw);\r\n}\r\ndraw();\r\n\n\n//# sourceURL=webpack://8queens/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;