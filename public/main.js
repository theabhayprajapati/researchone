/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/helper.js":
/*!***********************!*\
  !*** ./src/helper.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"downloadCSV\": () => (/* binding */ downloadCSV)\n/* harmony export */ });\n\r\n/* \r\n{\r\n  \"singleTunnel\": {\r\n    \"trial\": [\r\n      {\r\n        \"timestamp\": 1210,\r\n        \"times\": 1\r\n      },\r\n      {\r\n        \"timestamp\": 167,\r\n        \"times\": 2\r\n      },\r\n      {\r\n        \"timestamp\": 219,\r\n        \"times\": 3\r\n      },\r\n      {\r\n        \"timestamp\": 463,\r\n        \"times\": 4\r\n      },\r\n      {\r\n        \"timestamp\": 67,\r\n        \"times\": 10\r\n      }\r\n    ],\r\n    \"performance\": [\r\n      {\r\n        \"timestamp\": 44,\r\n        \"times\": 5\r\n      },\r\n      {\r\n        \"timestamp\": 42,\r\n        \"times\": 6\r\n      },\r\n      {\r\n        \"timestamp\": 28,\r\n        \"times\": 7\r\n      },\r\n      {\r\n        \"timestamp\": 52,\r\n        \"times\": 8\r\n      },\r\n      {\r\n        \"timestamp\": 37,\r\n        \"times\": 9\r\n      }\r\n    ]\r\n  },\r\n  \"doubleTunnel\": {\r\n    \"trial\": {\r\n      \"center\": [\r\n        {\r\n          \"timestamp\": 0,\r\n          \"times\": 11\r\n        }\r\n      ],\r\n      \"left\": [\r\n        {\r\n          \"timestamp\": 106,\r\n          \"times\": 20\r\n        },\r\n        {\r\n          \"timestamp\": 371,\r\n          \"times\": 21\r\n        }\r\n      ],\r\n      \"right\": [\r\n        {\r\n          \"timestamp\": 0,\r\n          \"times\": 12\r\n        },\r\n        {\r\n          \"timestamp\": 0,\r\n          \"times\": 13\r\n        },\r\n        {\r\n          \"timestamp\": 0,\r\n          \"times\": 14\r\n        },\r\n        {\r\n          \"timestamp\": 101,\r\n          \"times\": 22\r\n        },\r\n        {\r\n          \"timestamp\": 119,\r\n          \"times\": 23\r\n        },\r\n        {\r\n          \"timestamp\": 123,\r\n          \"times\": 24\r\n        }\r\n      ]\r\n    },\r\n    \"performance\": {\r\n      \"center\": [],\r\n      \"left\": [\r\n        {\r\n          \"timestamp\": 0,\r\n          \"times\": 18\r\n        },\r\n        {\r\n          \"timestamp\": 70,\r\n          \"times\": 27\r\n        },\r\n        {\r\n          \"timestamp\": 447,\r\n          \"times\": 28\r\n        }\r\n      ],\r\n      \"right\": [\r\n        {\r\n          \"timestamp\": 0,\r\n          \"times\": 15\r\n        },\r\n        {\r\n          \"timestamp\": 0,\r\n          \"times\": 16\r\n        },\r\n        {\r\n          \"timestamp\": 0,\r\n          \"times\": 17\r\n        },\r\n        {\r\n          \"timestamp\": 142,\r\n          \"times\": 19\r\n        },\r\n        {\r\n          \"timestamp\": 182,\r\n          \"times\": 25\r\n        },\r\n        {\r\n          \"timestamp\": 101,\r\n          \"times\": 26\r\n        },\r\n        {\r\n          \"timestamp\": 400,\r\n          \"times\": 29\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}\r\n\r\n\r\n: CSV\r\n\r\nsingleTunnel\r\ntrial\r\ntimestamp,times\r\n1210,1\r\n167,2\r\n219,3\r\n463,4\r\n67,10\r\nperformance\r\ntimestamp,times\r\n44,5\r\n42,6\r\n28,7\r\n52,8\r\n37,9\r\ndoubleTunnel\r\ntrial\r\ncenter\r\ntimestamp,times\r\n0,11\r\nleft\r\ntimestamp,times\r\n106,20\r\n371,21\r\nright\r\ntimestamp,times\r\n0,12\r\n0,13\r\n0,14\r\n101,22\r\n119,23\r\n123,24\r\nperformance\r\ncenter\r\ntimestamp,times\r\nleft\r\ntimestamp,times\r\n0,18\r\n70,27\r\n447,28\r\nright\r\ntimestamp,times\r\n0,15\r\n0,16\r\n0,17\r\n142,19\r\n182,25\r\n101,26\r\n400,29\r\n\r\n\r\n\r\n\r\n*/\r\n\r\nfunction convertArrayObjectToCSV(jsonData) {\r\n    let csv = \"\";\r\n\r\n    // Iterate through the JSON data\r\n    for (const tunnelType in jsonData) {\r\n        csv += tunnelType + \"\\n\";\r\n        for (const trialType in jsonData[tunnelType]) {\r\n            csv += \", \" + trialType + \"\\n\";\r\n            if (Array.isArray(jsonData[tunnelType][trialType])) {\r\n                csv += \", timestamp, times\\n\";\r\n                for (const trial of jsonData[tunnelType][trialType]) {\r\n                    csv += `, ${trial.timestamp}, ${trial.times}\\n`;\r\n                }\r\n            } else {\r\n                for (const centerType in jsonData[tunnelType][trialType]) {\r\n                    csv += \", \" + centerType + \"\\n\";\r\n                    csv += \", timestamp, times\\n\";\r\n                    for (const center of jsonData[tunnelType][trialType][centerType]) {\r\n                        csv += `, ${center.timestamp}, ${center.times}\\n`;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return csv;\r\n}\r\n\r\n// download csv\r\nconst downloadCSV = (array) => {\r\n    const link = document.createElement('a');\r\n    let csv = convertArrayObjectToCSV(array);\r\n    console.log('csv', csv);\r\n    if (csv == null) return;\r\n    const filename = filenamefn() + '.csv';\r\n    if (!csv.match(/^data:text\\/csv/i)) {\r\n        csv = `data:text/csv;charset=utf-8,${csv}`;\r\n    }\r\n    link.setAttribute('href', encodeURI(csv));\r\n    link.setAttribute('download', filename);\r\n    link.click();\r\n};\r\n\r\n\r\nfunction filenamefn() {\r\n    var d = new Date();\r\n    var n = d.getTime();\r\n    return n;\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack://8queens/./src/helper.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helper */ \"./src/helper.js\");\n\r\n\r\nconst HEIGHT = 480;\r\nconst WIDTH = 800;\r\nconst marioHEIGHT = 32;\r\nconst marioWIDTH = 32;\r\nconst TUNNEL_WIDTH = 100;\r\nconst TUNNEL_HEIGHT = 50;\r\nconst RIGHT_CENTER = (WIDTH / 4) - (TUNNEL_WIDTH / 2);\r\nconst LEFT_CENTER = (WIDTH / 4) * 3 - (TUNNEL_WIDTH / 2) + 50;\r\nvar killed = false;\r\nconst canvas = document.createElement('canvas');\r\nconst ctx = canvas.getContext('2d');\r\ncanvas.width = WIDTH;\r\ncanvas.style.background = 'black';\r\ncanvas.height = HEIGHT;\r\ndocument.body.appendChild(canvas);\r\n// make a download button below the canvas\r\nconst downloadButton = document.createElement('button');\r\ndownloadButton.innerHTML = 'Download';\r\ndownloadButton.style.position = 'absolute';\r\ndownloadButton.style.bottom = '0';\r\ndownloadButton.style.left = '0';\r\ndownloadButton.setAttribute('id', 'downloadButton');\r\ndownloadButton.addEventListener('click', function () {\r\n    (0,_helper__WEBPACK_IMPORTED_MODULE_0__.downloadCSV)(game.scores);\r\n});\r\n\r\ndocument.body.appendChild(downloadButton);\r\n\r\n\r\nclass GameRecord {\r\n    constructor(\r\n        timestamp, times\r\n    ) {\r\n        this.timestamp = 0;\r\n        this.times = 0;\r\n    }\r\n}\r\nconst gameValues = {\r\n    status: {\r\n        'playing': 'playing',\r\n        'stop': 'stop',\r\n        'pause': 'pause',\r\n        'gameOver': 'gameOver'\r\n    },\r\n    modes: {\r\n        'singleTunnel': 'singleTunnel',\r\n        'doubleTunnel': 'doubleTunnel',\r\n    },\r\n    xPosition: {\r\n        'left': 'left',\r\n        'right': 'right',\r\n        'center': 'center'\r\n    },\r\n    modeStatus: {\r\n        'trial': 'trial',\r\n        'performance': 'performance'\r\n    }\r\n}\r\nclass Game {\r\n    constructor() {\r\n        this.tunnel = new Tunnel();\r\n        this.mario = new Mario();\r\n        this.stopwatch = new Stopwatch();\r\n        this.scores = {\r\n            'singleTunnel': {\r\n                'trial': [],\r\n                'performance': []\r\n            },\r\n            'doubleTunnel': {\r\n                'trial': {\r\n                    'center': [],\r\n                    'left': [],\r\n                    'right': []\r\n                },\r\n                'performance': {\r\n                    'center': [],\r\n                    'left': [],\r\n                    'right': []\r\n                },\r\n            }\r\n        };\r\n        this.gameMode = gameValues.modes.singleTunnel;\r\n        this.times = 0;\r\n        this.modeStatus = gameValues.modeStatus.trial;\r\n        this.status = gameValues.status.stop;\r\n    }\r\n    changeGameMode() {\r\n        if (this.gameMode === gameValues.modes.singleTunnel) {\r\n            this.gameMode = gameValues.modes.doubleTunnel;\r\n        } else {\r\n            this.gameMode = gameValues.modes.singleTunnel;\r\n        }\r\n    }\r\n    pause() {\r\n        this.status = gameValues.status.pause;\r\n    }\r\n    pauseUI() {\r\n        mario.speed = 0;\r\n        stopwatch.stop();\r\n    }\r\n}\r\n\r\nclass Mario {\r\n    constructor() {\r\n        this.x = (WIDTH / 2) - (marioWIDTH / 2);\r\n        this.y = 0;\r\n        this.width = marioWIDTH;\r\n        this.height = marioHEIGHT;\r\n        this.image = new Image();\r\n        this.image.src = 'images/mario.png';\r\n        this.speed = 5;\r\n        this.times = 1;\r\n        this.xPosition = gameValues.xPosition.center;\r\n    }\r\n    draw() {\r\n        ctx.drawImage(this.image, this.x, this.y, this.width, this.height);\r\n    }\r\n    move() {\r\n        this.y += this.speed;\r\n    }\r\n    checkCollision() {\r\n        if (game.gameMode === 'singleTunnel') {\r\n            if (tunnel.checkCollision(this)) {\r\n                // Mario hit the tunnel\r\n                this.speed = 0;\r\n                stopwatch.stop();\r\n                this.onKill('tunnel');\r\n                this.startOver();\r\n            }\r\n            if (this.y + this.height > HEIGHT) {\r\n                this.y = HEIGHT - this.height;\r\n                this.speed = 0;\r\n                stopwatch.stop();\r\n                this.onKill('tunnel');\r\n                this.startOver();\r\n            }\r\n        }\r\n        if (game.gameMode === 'doubleTunnel') {\r\n            if (doubleTunnel.checkCollision(this)) {\r\n                // Mario hit the tunnel\r\n                this.speed = 0;\r\n                stopwatch.stop();\r\n                this.onKill('tunnel');\r\n                this.startOver();\r\n            }\r\n            if (this.y + this.height > HEIGHT) {\r\n                this.y = HEIGHT - this.height;\r\n                this.speed = 0;\r\n                stopwatch.stop();\r\n                this.onKill('tunnel');\r\n                this.startOver();\r\n            }\r\n        }\r\n    }\r\n    startOver() {\r\n        if (game.gameMode === 'singleTunnel') {\r\n            this.x = (WIDTH / 2) - (marioWIDTH / 2);\r\n        } else {\r\n            // random left right \r\n            const random = Math.floor(Math.random() * 2);\r\n            if (random === 0) {\r\n                this.xPosition = gameValues.xPosition.left;\r\n                this.x = RIGHT_CENTER;\r\n            } else {\r\n                this.xPosition = gameValues.xPosition.right;\r\n                this.x = LEFT_CENTER;\r\n            }\r\n        }\r\n        this.y = 0;\r\n        this.width = marioWIDTH;\r\n        this.height = marioHEIGHT;\r\n        this.image = new Image();\r\n        this.image.src = 'images/mario.png';\r\n        this.speed = 5;\r\n        stopwatch.stop();\r\n        stopwatch.start();\r\n    }\r\n    onKill(killedBy) {\r\n        const elapsedTime = stopwatch.getElapsedTime();\r\n        const record = {\r\n            'timestamp': killedBy === 'tunnel' ? 0 : stopwatch.getElapsedTime(),\r\n            'times': this.times\r\n        }\r\n        console.log(record);\r\n        // game.scores[game.gameMode][game.modeStatus].push(record);\r\n        if (game.gameMode === gameValues.modes.singleTunnel) {\r\n            game.scores.singleTunnel[game.modeStatus].push(record);\r\n        } else {\r\n            console.log(mario.xPosition)\r\n            game.scores.doubleTunnel[game.modeStatus][mario.xPosition].push(record);\r\n        }\r\n        console.log(game.scores);\r\n        this.times++;\r\n    }\r\n    position(x) {\r\n        this.x = x;\r\n    }\r\n}\r\nclass Stopwatch {\r\n    constructor() {\r\n        this.startTime = null;\r\n        this.stopTime = null;\r\n        this.running = false;\r\n    }\r\n    start() {\r\n        if (this.running) {\r\n            return;\r\n        }\r\n        this.startTime = new Date().getTime();\r\n        this.running = true;\r\n    }\r\n    stop() {\r\n        if (!this.running) {\r\n            return;\r\n        }\r\n        this.stopTime = new Date().getTime();\r\n        this.running = false;\r\n    }\r\n    getElapsedTime() {\r\n        if (this.startTime == null) {\r\n            return 0;\r\n        }\r\n        if (this.running) {\r\n            return new Date().getTime() - this.startTime;\r\n        }\r\n        return this.stopTime - this.startTime;\r\n    }\r\n}\r\n\r\nconst stopwatch = new Stopwatch();\r\nclass Tunnel {\r\n    constructor(x) {\r\n        this.x = x;\r\n        this.y = (HEIGHT / 1.25);\r\n        this.width = TUNNEL_WIDTH;\r\n        this.height = TUNNEL_HEIGHT;\r\n    }\r\n    draw() {\r\n        ctx.fillStyle = \"green\";\r\n        ctx.fillRect(this.x, this.y, this.width, this.height);\r\n    }\r\n    checkCollision(obj) {\r\n        if (obj.x < this.x + this.width &&\r\n            obj.x + obj.width > this.x &&\r\n            obj.y + obj.height > this.y &&\r\n            obj.y + obj.height < this.y + this.height) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nconst tunnel = new Tunnel((WIDTH / 2) - 50);\r\nconst mario = new Mario();\r\n\r\ndocument.addEventListener('keydown', (event) => {\r\n    if (event.code === 'ArrowUp') {\r\n        mario.speed = -5;\r\n    }\r\n});\r\n\r\ndocument.addEventListener('keyup', (event) => {\r\n    if (event.code === 'ArrowUp') {\r\n        mario.speed = 5;\r\n    }\r\n});\r\n// right arrow key\r\ndocument.addEventListener('keydown', (event) => {\r\n    if (game.status === gameValues.status.playing) {\r\n        if (game.gameMode === gameValues.modes.doubleTunnel) {\r\n            if (mario.xPosition === gameValues.xPosition.right) {\r\n                if (event.code === 'ArrowRight') {\r\n                    track();\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n// left arrow key\r\ndocument.addEventListener('keydown', (event) => {\r\n    if (game.status === gameValues.status.playing) {\r\n        if (game.gameMode === gameValues.modes.doubleTunnel) {\r\n            if (mario.xPosition === gameValues.xPosition.left) {\r\n                if (event.code === 'ArrowLeft') {\r\n                    track();\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n/* space speed 0 */\r\ndocument.addEventListener('keydown', (event) => {\r\n    if (game.status === gameValues.status.playing) {\r\n        if (game.gameMode === gameValues.modes.singleTunnel) {\r\n            if (event.code === 'Space') {\r\n                track();\r\n            }\r\n        }\r\n    }\r\n});\r\nfunction track() {\r\n    game.pauseUI();\r\n    /* pause for random time */\r\n    const random = Math.floor(Math.random() * 1000);\r\n    console.log(game.scores);\r\n    mario.onKill();\r\n    // setTimeout(() => {\r\n    mario.startOver();\r\n    // }, random * 10);\r\n}\r\n// start over click r\r\ndocument.addEventListener('keydown', (event) => {\r\n    if (event.code === 'KeyR') {\r\n        mario.startOver();\r\n        game.status = gameValues.status.playing;\r\n        game.gameMode = gameValues.modes.singleTunnel;\r\n    }\r\n});\r\n/* click m change game mode */\r\n\r\ndocument.addEventListener('keydown', (event) => {\r\n    if (event.code === 'KeyM') {\r\n        game.changeGameMode();\r\n        mario.startOver();\r\n    }\r\n});\r\ndocument.addEventListener('keydown', (event) => {\r\n    if (event.code === 'KeyS') {\r\n        game.status = gameValues.status.playing;\r\n        console.log(game.status);\r\n    }\r\n}\r\n);\r\nstopwatch.start();\r\nconst game = new Game();\r\nclass DoubleTunnel {\r\n    constructor() {\r\n        // left center tunnel\r\n        this.tunnel1 = new Tunnel((WIDTH / 4) - (TUNNEL_WIDTH / 2));\r\n        // right center tunnel\r\n        this.tunnel2 = new Tunnel((WIDTH / 4) * 3 - (TUNNEL_WIDTH / 2));\r\n    }\r\n    draw() {\r\n        this.tunnel1.draw();\r\n        this.tunnel2.draw();\r\n    }\r\n    checkCollision(obj) {\r\n        if (this.tunnel1.checkCollision(obj) || this.tunnel2.checkCollision(obj)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nconst doubleTunnel = new DoubleTunnel();\r\n\r\nfunction repharseGame(game, mario) {\r\n    if (mario.times >= 0 && mario.times <= 10) {\r\n        game.gameMode = 'singleTunnel'\r\n    } else if (mario.times >= 10 && mario.times <= 30) {\r\n        game.gameMode = 'doubleTunnel'\r\n    }\r\n}\r\n\r\nfunction draw() {\r\n    if (game.status == gameValues.status.stop) {\r\n        ctx.clearRect(0, 0, WIDTH, HEIGHT);\r\n        ctx.fillStyle = \"white\";\r\n        ctx.font = \"20px Arial\";\r\n        ctx.fillText(`Press S to start`, 20, 40);\r\n    } else if (game.status == 'playing') {\r\n        ctx.clearRect(0, 0, WIDTH, HEIGHT);\r\n        mario.draw();\r\n        mario.move();\r\n        mario.checkCollision();\r\n        if (game.gameMode === gameValues.modes.singleTunnel) {\r\n            tunnel.draw();\r\n        } else {\r\n            doubleTunnel.draw();\r\n        }\r\n        repharseGame(game, mario);\r\n        if (mario.times >= 30) {\r\n            game.status = gameValues.status.gameOver;\r\n        }\r\n        // Display elapsed time\r\n        ctx.fillStyle = \"white\";\r\n        ctx.font = \"20px Arial\";\r\n        ctx.fillText(`Elapsed Time: ${stopwatch.getElapsedTime()}ms`, 20, 40);\r\n        // Display times\r\n        ctx.fillStyle = \"white\";\r\n        ctx.font = \"20px Arial\";\r\n        /* \r\n        if marios times\r\n        */\r\n        ctx.fillText(`Times: ${mario.times}`, 20, 80);\r\n        takeMarioTimeGiveStatusMessages(mario);\r\n    } else if (game.status == gameValues.status.gameOver) {\r\n        stopwatch.stop();\r\n        ctx.clearRect(0, 0, WIDTH, HEIGHT);\r\n        ctx.fillStyle = \"white\";\r\n        ctx.font = \"20px Arial\";\r\n        ctx.fillText(`Game Over`, 20, 40);\r\n        ctx.fillText(`Press R to restart`, 20, 80);\r\n        ctx.fillText(`Press M to change game mode`, 20, 120);\r\n        ctx.fillText(`Your score: ${mario.times}`, 20, 160);\r\n        ctx.fillText(`Your time: ${stopwatch.getElapsedTime()}ms`, 20, 200);\r\n        ctx.fillText(`Your game mode: ${game.gameMode}`, 20, 240);\r\n        ctx.fillText(`Your status: ${statusMessages[mario.times]}`, 20, 280);\r\n    } else {\r\n        console.log(\"inside else...\")\r\n    }\r\n    requestAnimationFrame(draw);\r\n}\r\ndraw();\r\n\r\nvar statusMessages = {\r\n    '1': 'trial SINGLE HAND',\r\n    '2': 'Performance SINGLE HAND',\r\n    '3': 'Trial DOUBLE HAND LEFT',\r\n    '4': 'Performance DOUBLE HAND LEFT',\r\n    '5': 'Trial DOUBLE HAND RIGHT',\r\n    '6': 'Performance DOUBLE HAND RIGHT',\r\n}\r\nfunction takeMarioTimeGiveStatusMessages(mario) {\r\n    // divide by 5\r\n    var times = Math.floor(mario.times / 5);\r\n    console.log(times);\r\n    ctx.fillStyle = \"white\";\r\n    ctx.font = \"20px Arial\";\r\n    ctx.fillText(`Your status: ${statusMessages[(times + 1)]}`, (WIDTH - ((50 * WIDTH) / 100)), 40);\r\n    var modeStatus = statusMessages[(times + 1)]?.toLowerCase().split(' ');\r\n    console.log(modeStatus);\r\n    if (modeStatus.includes('trial')) {\r\n        game.modeStatus = gameValues.modeStatus.trial;\r\n    } else {\r\n        game.modeStatus = gameValues.modeStatus.performance;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://8queens/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;